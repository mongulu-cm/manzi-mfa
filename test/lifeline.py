# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
import time

class TestAppointmenttest():

  def setup_method(self, method):
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    self.driver = webdriver.Chrome(options=chrome_options)
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_appointmenttest(self):
    try:
        # Test name: appointment_test
        # Step # | name | target | value
        # 1 | open | / | 
        self.driver.get("https://manzi-mfa.mongulu.cm/")
        wait = WebDriverWait(self.driver, 120)
        wait.until(EC.presence_of_element_located((By.ID, "select-service")))        

        # 2 | setWindowSize | 1680x865 | 
        self.driver.set_window_size(1680, 865)
        # 3 | select | id=select-service | label=DevOps/SRE
        dropdown = self.driver.find_element(By.ID, "select-service")
        dropdown.find_element(By.XPATH, "//option[. = 'DevOps/SRE']").click()
        # 4 | mouseDownAt | id=select-service | 0,-0.5
        element = self.driver.find_element(By.ID, "select-service")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        # 5 | mouseMoveAt | id=select-service | 0,-0.5
        element = self.driver.find_element(By.ID, "select-service")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 6 | mouseUpAt | id=select-service | 0,-0.5
        element = self.driver.find_element(By.ID, "select-service")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        # 7 | select | id=select-provider | label=Bill METANGMO
        dropdown = self.driver.find_element(By.ID, "select-provider")
        dropdown.find_element(By.XPATH, "//option[. = 'Bill METANGMO']").click()
        # 8 | mouseDownAt | id=select-provider | 0,-0.1875
        element = self.driver.find_element(By.ID, "select-provider")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        # 9 | mouseMoveAt | id=select-provider | 0,-0.1875
        element = self.driver.find_element(By.ID, "select-provider")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 10 | mouseUpAt | id=select-provider | 0,-0.1875
        element = self.driver.find_element(By.ID, "select-provider")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        # 11 | click | id=button-next-1 | 
        self.driver.find_element(By.ID, "button-next-1").click()
        time.sleep(5)
        wait.until(EC.presence_of_element_located((By.ID, "button-next-2")))
        # 20 | click | id=button-next-2 | 
        self.driver.find_element(By.ID, "button-next-2").click()
        time.sleep(5)
        # 22 | type | id=first-name | Test
        self.driver.find_element(By.ID, "first-name").send_keys("Test")
        self.driver.find_element(By.ID, "last-name").send_keys("Test")
        self.driver.find_element(By.ID, "city").send_keys("Test")
        self.driver.find_element(By.ID, "email").send_keys("test@gmail.com")
        self.driver.find_element(By.ID, "phone-number").send_keys("0033066752512")
        # 31 | click | id=button-next-3 | 
        self.driver.find_element(By.ID, "button-next-3").click()
        time.sleep(5)
        # 32 | click | id=book-appointment-submit | 
        self.driver.find_element(By.ID, "book-appointment-submit").click()
        time.sleep(5)
    finally:
        self.driver.quit()
  